[
  {
    "name": "Skeleton",
    "doc": "/** Stores the current pose for a skeleton.\n * <p>\n * See <a href=\"http://esotericsoftware.com/spine-runtime-architecture#Instance-objects\">Instance objects</a> in the Spine\n * Runtimes Guide. */",
    "methods": [
      {
        "name": "updateCache",
        "parameters": "()",
        "doc": "/** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\n\t * constraints, or weighted path attachments are added or removed. */"
      },
      {
        "name": "updateWorldTransform",
        "parameters": "(Physics physics)",
        "doc": "/** Updates the world transform for each bone and applies all constraints.\n\t * <p>\n\t * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\n\t * Runtimes Guide. */"
      },
      {
        "name": "updateWorldTransform",
        "parameters": "(Physics physics, Bone parent)",
        "doc": "/** Temporarily sets the root bone as a child of the specified bone, then updates the world transform for each bone and applies\n\t * all constraints.\n\t * <p>\n\t * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\n\t * Runtimes Guide. */"
      },
      {
        "name": "setToSetupPose",
        "parameters": "()",
        "doc": "/** Sets the bones, constraints, slots, and draw order to their setup pose values. */"
      },
      {
        "name": "setBonesToSetupPose",
        "parameters": "()",
        "doc": "/** Sets the bones and constraints to their setup pose values. */"
      },
      {
        "name": "setSlotsToSetupPose",
        "parameters": "()",
        "doc": "/** Sets the slots and draw order to their setup pose values. */"
      },
      {
        "name": "getData",
        "parameters": "()",
        "doc": "/** The skeleton's setup pose data. */"
      },
      {
        "name": "getBones",
        "parameters": "()",
        "doc": "/** The skeleton's bones, sorted parent first. The root bone is always the first bone. */"
      },
      {
        "name": "getUpdateCache",
        "parameters": "()",
        "doc": "/** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */"
      },
      {
        "name": "getRootBone",
        "parameters": "()",
        "doc": "/** Returns the root bone, or null if the skeleton has no bones. */"
      },
      {
        "name": "findBone",
        "parameters": "(String boneName)",
        "doc": "/** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n\t * repeatedly. */"
      },
      {
        "name": "getSlots",
        "parameters": "()",
        "doc": "/** The skeleton's slots. */"
      },
      {
        "name": "findSlot",
        "parameters": "(String slotName)",
        "doc": "/** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n\t * repeatedly. */"
      },
      {
        "name": "getDrawOrder",
        "parameters": "()",
        "doc": "/** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */"
      },
      {
        "name": "getSkin",
        "parameters": "()",
        "doc": "/** The skeleton's current skin. */"
      },
      {
        "name": "setSkin",
        "parameters": "(String skinName)",
        "doc": "/** Sets a skin by name.\n\t * <p>\n\t * See {@link #setSkin(Skin)}. */"
      },
      {
        "name": "setSkin",
        "parameters": "(@Null Skin newSkin)",
        "doc": "/** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}. If the\n\t * skin is changed, {@link #updateCache()} is called.\n\t * <p>\n\t * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n\t * old skin, each slot's setup mode attachment is attached from the new skin.\n\t * <p>\n\t * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n\t * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply(Skeleton)} is called before the next time the\n\t * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new\n\t * skin. */"
      },
      {
        "name": "getAttachment",
        "parameters": "(String slotName, String attachmentName)",
        "doc": "/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\n\t * name.\n\t * <p>\n\t * See {@link #getAttachment(int, String)}. */"
      },
      {
        "name": "getAttachment",
        "parameters": "(int slotIndex, String attachmentName)",
        "doc": "/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\n\t * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n\t * <p>\n\t * See <a href=\"http://esotericsoftware.com/spine-runtime-skins\">Runtime skins</a> in the Spine Runtimes Guide. */"
      },
      {
        "name": "setAttachment",
        "parameters": "(String slotName, @Null String attachmentName)",
        "doc": "/** A convenience method to set an attachment by finding the slot with {@link #findSlot(String)}, finding the attachment with\n\t * {@link #getAttachment(int, String)}, then setting the slot's {@link Slot#attachment}.\n\t * @param attachmentName May be null to clear the slot's attachment. */"
      },
      {
        "name": "getIkConstraints",
        "parameters": "()",
        "doc": "/** The skeleton's IK constraints. */"
      },
      {
        "name": "findIkConstraint",
        "parameters": "(String constraintName)",
        "doc": "/** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n\t * than to call it repeatedly. */"
      },
      {
        "name": "getTransformConstraints",
        "parameters": "()",
        "doc": "/** The skeleton's transform constraints. */"
      },
      {
        "name": "findTransformConstraint",
        "parameters": "(String constraintName)",
        "doc": "/** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n\t * this method than to call it repeatedly. */"
      },
      {
        "name": "getPathConstraints",
        "parameters": "()",
        "doc": "/** The skeleton's path constraints. */"
      },
      {
        "name": "findPathConstraint",
        "parameters": "(String constraintName)",
        "doc": "/** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n\t * than to call it repeatedly. */"
      },
      {
        "name": "getPhysicsConstraints",
        "parameters": "()",
        "doc": "/** The skeleton's physics constraints. */"
      },
      {
        "name": "findPhysicsConstraint",
        "parameters": "(String constraintName)",
        "doc": "/** Finds a physics constraint by comparing each physics constraint's name. It is more efficient to cache the results of this\n\t * method than to call it repeatedly. */"
      },
      {
        "name": "getBounds",
        "parameters": "(Vector2 offset, Vector2 size, FloatArray temp)",
        "doc": "/** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n\t * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n\t * @param size An output value, the width and height of the AABB.\n\t * @param temp Working memory to temporarily store attachments' computed world vertices. */"
      },
      {
        "name": "getBounds",
        "parameters": "(Vector2 offset, Vector2 size, FloatArray temp, SkeletonClipping clipper)",
        "doc": "/** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose. Optionally applies\n\t * clipping.\n\t * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n\t * @param size An output value, the width and height of the AABB.\n\t * @param temp Working memory to temporarily store attachments' computed world vertices.\n\t * @param clipper {@link SkeletonClipping} to use. If <code>null</code>, no clipping is applied. */"
      },
      {
        "name": "getColor",
        "parameters": "()",
        "doc": "/** The color to tint all the skeleton's attachments. */"
      },
      {
        "name": "setColor",
        "parameters": "(Color color)",
        "doc": "/** A convenience method for setting the skeleton color. The color can also be set by modifying {@link #getColor()}. */"
      },
      {
        "name": "setColor",
        "parameters": "(float r, float g, float b, float a)",
        "doc": "/** A convenience method for setting the skeleton color. The color can also be set by modifying {@link #getColor()}. */"
      },
      {
        "name": "getScaleX",
        "parameters": "()",
        "doc": "/** Scales the entire skeleton on the X axis.\n\t * <p>\n\t * Bones that do not inherit scale are still affected by this property. */"
      },
      {
        "name": "getScaleY",
        "parameters": "()",
        "doc": "/** Scales the entire skeleton on the Y axis.\n\t * <p>\n\t * Bones that do not inherit scale are still affected by this property. */"
      },
      {
        "name": "setScale",
        "parameters": "(float scaleX, float scaleY)",
        "doc": "/** Scales the entire skeleton on the X and Y axes.\n\t * <p>\n\t * Bones that do not inherit scale are still affected by this property. */"
      },
      {
        "name": "getX",
        "parameters": "()",
        "doc": "/** Sets the skeleton X position, which is added to the root bone worldX position.\n\t * <p>\n\t * Bones that do not inherit translation are still affected by this property. */"
      },
      {
        "name": "getY",
        "parameters": "()",
        "doc": "/** Sets the skeleton Y position, which is added to the root bone worldY position.\n\t * <p>\n\t * Bones that do not inherit translation are still affected by this property. */"
      },
      {
        "name": "setPosition",
        "parameters": "(float x, float y)",
        "doc": "/** Sets the skeleton X and Y position, which is added to the root bone worldX and worldY position.\n\t * <p>\n\t * Bones that do not inherit translation are still affected by this property. */"
      },
      {
        "name": "physicsTranslate",
        "parameters": "(float x, float y)",
        "doc": "/** Calls {@link PhysicsConstraint#translate(float, float)} for each physics constraint. */"
      },
      {
        "name": "physicsRotate",
        "parameters": "(float x, float y, float degrees)",
        "doc": "/** Calls {@link PhysicsConstraint#rotate(float, float, float)} for each physics constraint. */"
      },
      {
        "name": "getTime",
        "parameters": "()",
        "doc": "/** Returns the skeleton's time. This is used for time-based manipulations, such as {@link PhysicsConstraint}.\n\t * <p>\n\t * See {@link #update(float)}. */"
      },
      {
        "name": "update",
        "parameters": "(float delta)",
        "doc": "/** Increments the skeleton's {@link #time}. */"
      }
    ],
    "fields": [],
    "type": "class"
  },
  {
    "name": "Physics",
    "doc": "/** Determines how physics and other non-deterministic updates are applied. */",
    "methods": [],
    "fields": [
      {
        "doc": "/** Determines how physics and other non-deterministic updates are applied. */",
        "name": "none",
        "type": "Physics",
        "isEnumValue": true
      },
      {
        "doc": "/** Determines how physics and other non-deterministic updates are applied. */",
        "name": "reset",
        "type": "Physics",
        "isEnumValue": true
      },
      {
        "doc": "/** Determines how physics and other non-deterministic updates are applied. */",
        "name": "update",
        "type": "Physics",
        "isEnumValue": true
      },
      {
        "doc": "/** Determines how physics and other non-deterministic updates are applied. */",
        "name": "pose",
        "type": "Physics",
        "isEnumValue": true
      }
    ],
    "type": "enum"
  }
]
